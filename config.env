CONFIG_ENV=config.env
KERNEL_SOURCE=https://github.com/GangPeter/android_kernel_xiaomi_mt6885
KERNEL_SOURCE_BRANCH=cgroup-v2
KERNEL_CONFIG=vendor/cezanne_user_defconfig
ENABLE_KVM=true
#启用lxc-docker支持
ENABLE_LXC=true
#KernelSU相关
ENABLE_KERNELSU=true
KERNELSU_TAG=v0.9.5
KSU_EXPECTED_SIZE=
KSU_EXPECTED_HASH=
ADD_KPROBES_CONFIG=true
ADD_OVERLAYFS_CONFIG=true

KERNEL_IMAGE_NAME=Image.gz-dtb
ARCH=arm64

#额外附加命令，默认启用LLVM=1 LLVM_IAS=1 
EXTRA_CMDS:LD=ld.lld
#EXTRA_CMDS:LLVM=1 LLVM_IAS=1 

#Ccache,可加速二次构建
ENABLE_CCACHE=true 

#关闭fstack-protector-strong(clang-r383902b)
DISABLE_FST=true

#(0)使用Android NDK编译内核，NDK_VERSION可选的值有26,25,24,23,22,21,20,19,18,17,16,15
NDK_VERSION=21

#(1)谷歌官方的AOSP clang，对Build kernel Google git.yml生效
CLANG_BRANCH=android11-release
CLANG_VERSION=r383902b

#(2)第三方源的AOSP clang
#此配置对 Build Kernel on ubuntu 20.04（build-kernel_ubuntu20.04.yml)和Build Kernel on ubuntu 22.04（build-kernel_ubuntu22.04.yml)都生效
TCLANG_BRANCH=clang-r450784e

#(3)使用SD-clang构建内核，高通的clang编译器。默认启用启用分支10,目前存在的分支有 10,12,14,14.03
SD_CLANG_BRANCH=10

#(4)若要使用proton-clang，请使用build kernel by protonclang (build-kernel_by_proton-clang.yml)
ENABLE_PROTON_CLANG=true
PROTON_CLANG_SOURCE=https://gitlab.com/LeCmnGend/proton-clang
#PROTON_CLANG_BRANCH可选的值有 clang-13 ,clang-14, clang-15, clang-16, clang-17
PROTON_CLANG_BRANCH=clang-13

#(5)与proton-clang类似项目Neutron-clang,官网https://github.com/Neutron-Toolchains/
#目前存在版本main,16,17,18。main始终指向最新的Neutron-clang
NEUTRON_CLANG_VERSION=main
#采用较新的glibc，一般来是Neutron-clang工作所需要的，如果出现glibc相关的错误，请启用。更多参考这https://github.com/Neutron-Toolchains/clang-build-catalogue#how-to-install
ENABLE_CLIBC_PATCH=true

#(5.5)tc_build项目作者的预编译Slim-llvm toolchain ,使用pgo优化，速度更快。跟多介绍见http://kernel.mirror.iweb.ca/tools/llvm/。配合ELECTRON_BINUTILS使用。
#目前SLIM_LLVM_CLANG_VERSION的可选值有18.1.0 17.0.6 16.0.6 15.0.7 14.0.6 13.0.1 12.0.1 11.1.0
SLIM_LLVM_CLANG_VERSION=15.0.7
#基于tc-build的相同配置的binutils,配合slim llvm使用。ELECTRON_BINUTILS_VERSION2的可选值有 2.41 2.40 2.39 2.38 2.37 2.36.1 2.36 2.35.2 2.35.1 2.35 2.34 2.33.1 2.32 2.31
ELECTRON_BINUTILS_VERSION2=2.39

#（6）使用LLVM-clang，加我自己制作的electron-binutils来构建内核,由于ubuntu自带的binutils版本过少，加入electron-binutils可有更多版本的binutils,也更加合理的和各种llvm clang版本匹配。ELECTRON_BINUTILS_VERSION1和ELECTRON_BINUTILS_VERSION
#的取值是一样的，主要是懒得改了，加个1来区分，如果ELECTRON_BINUTILS_VERSION1留空则用ubuntu自带的binutils, 同理适用ELECTRON_BINUTILS_VERSION。(运行系统ubuntu-20.04)
#目前存在版本16.0.0  15.0.6  14.0.0  13.0.0  12.0.0  11.1.0  11.0.0  10.0.1  10.0.0  9.0.1  8.0.1
LLVM_CLANG_VERSION=11.0.0
#基于tc-build的相同配置的binutils,ELECTRON_BINUTILS_VERSION1的可选值有 2.41 2.40 2.39 2.38 2.37 2.36.1 2.36 2.35.2 2.35.1 2.35 2.34 2.33.1 2.32 2.31
ELECTRON_BINUTILS_VERSION1=2.35

#（6.5）使用llvm官方发布的最新的LLVM，基于ubuntu-22.04，加我自己制作的electron-binutils来构建内核。更新更快。(运行系统ubuntu-22.04,配置文件为build-kernel_by_LLVM-least.yml)
#目前LLVM存在版本即LLVM_VERSION的可选值 17.06 17.05 17.04 17.02 16.04 16.03 16.02
LLVM_VERSION=17.06
#基于tc-build的相同配置的binutils,ELECTRON_BINUTILS_VERSION的可选值有 2.41 2.40 2.39 2.38 2.37 2.36.1 2.36 2.35
ELECTRON_BINUTILS_VERSION=2.41

#（7）使用ZyC clang，构建内核。该配置对build-kernel_by_ZyC-clang.yml生效
#目前存在版本 19,18,17,16.05,16
ZYC_CLANG_VERSION=16

#（8）使用ARM gcc，构建内核。该配置对build-kernel_by_ARM-gcc.yml生效
#目前存在版本 12.3  11.3  10.3  10.2 9.2 8.32  8.31  8.22  8.21
ARM_GCC_VERSION=8.21

#（9）使用Mandi-Sa clang,构建内核.该配置对build-kernel_by_Mandi-Sa-clang.yml生效
#目前存在版本 15 16 17 18 19
MANDI-SA_CLANG_VERSION=18

#Kali-Nethunter支持，默认关闭，支持内核版本4.04-4.19。旧的内核版本或补丁失败的参考kali官方补丁https://gitlab.com/kalilinux/nethunter/build-scripts/kali-nethunter-kernel
#仅Build kernel by clang-r383902b支持。https://www.kali.org/docs/nethunter/nethunter-kernel-2-config-1/
ENABLE_NETHUNTER=true
ENABLE_KALI=true
KERNEL_VERSION=4.14
ENABLE_WIREGUARD=false

# Custom Clang
USE_CUSTOM_CLANG=false
CUSTOM_CLANG_SOURCE=
CUSTOM_CLANG_BRANCH=

### if your set USE CUSTOM CLANG to false than DO NOT CHANGE CUSTOM CMDS
CUSTOM_CMDS:CLANG_TRIPLE=aarch64-linux-gnu-

# GCC
ENABLE_GCC_ARM64=true
ENABLE_GCC_ARM32=true
USE_CUSTOM_GCC_64=false
CUSTOM_GCC_64_SOURCE=
CUSTOM_GCC_64_BRANCH=
CUSTOM_GCC_64_BIN=aarch64-linux-android-
USE_CUSTOM_GCC_32=false
CUSTOM_GCC_32_SOURCE=
CUSTOM_GCC_32_BRANCH=
CUSTOM_GCC_32_BIN=arm-linux-androideabi-

# Configuration
DISABLE-LTO=true
DISABLE_CC_WERROR=true

# DTBO image
NEED_DTBO=false

# Build boot images
BUILD_BOOT_IMG=true
SOURCE_BOOT_IMAGE=https://github.com/GangPeter/LXC_KernelSU_Action/raw/refs/heads/main/boot/boot.img
